"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _amSynth = _interopRequireDefault(require("../../../color_fields_v2 copie/src/utils/amSynth.js"));

var _fmSynth = _interopRequireDefault(require("../../../color_fields_v2 copie/src/utils/fmSynth.js"));

var _enveloppe = _interopRequireDefault(require("./enveloppe.js"));

var _decibelToLinear = _interopRequireDefault(require("../math/decibelToLinear.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Note {
  constructor(audioContext, noteDictOsc) {
    this.audioContext = audioContext;
    this.frequency = noteDictOsc.frequency;
    this.velocity = noteDictOsc.velocity;
    this.duration = noteDictOsc.duration;
    this.envBreakpoints = noteDictOsc.enveloppe;
    this.metas = noteDictOsc.metas;
    this.output = this.audioContext.createGain();
    this.output.gain.value = (0, _decibelToLinear.default)(this.velocity);
    this.modGain = this.audioContext.createGain();

    switch (this.metas.synthType) {
      case 'sine':
        this.synth = this.audioContext.createOscillator();
        this.synth.frequency.value = this.frequency;
        break;

      case 'am':
        this.synth = new _amSynth.default(this.audioContext);
        this.synth.carrFreq = this.frequency;
        this.synth.modFreq = this.metas.modFreq;
        this.synth.modDepth = this.metas.modDepth;
        break;

      case 'fm':
        this.synth = new _fmSynth.default(this.audioContext);
        this.synth.carrFreq = this.frequency;
        this.synth.harmonicity = this.metas.harmonicity;
        this.synth.modIndex = this.metas.modIndex;
        break;

      case 'granular':
        break;
    }

    this.enveloppe = new _enveloppe.default(this.modGain.gain, this.duration, this.envBreakpoints);
    this.synth.connect(this.modGain);
    this.modGain.connect(this.output);
  }

  connect(dest) {
    console.log(dest);
    this.output.connect(dest);
  }

  play(time) {
    this.start(time);
    this.stop(time + this.duration);
  }

  start(time) {
    this.enveloppe.apply(time);
    this.synth.start(time);
  }

  stop(time) {
    this.synth.stop(time);
  }

}

exports.default = Note;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdGUuanMiXSwibmFtZXMiOlsiTm90ZSIsImNvbnN0cnVjdG9yIiwiYXVkaW9Db250ZXh0Iiwibm90ZURpY3RPc2MiLCJmcmVxdWVuY3kiLCJ2ZWxvY2l0eSIsImR1cmF0aW9uIiwiZW52QnJlYWtwb2ludHMiLCJlbnZlbG9wcGUiLCJtZXRhcyIsIm91dHB1dCIsImNyZWF0ZUdhaW4iLCJnYWluIiwidmFsdWUiLCJtb2RHYWluIiwic3ludGhUeXBlIiwic3ludGgiLCJjcmVhdGVPc2NpbGxhdG9yIiwiQW1TeW50aCIsImNhcnJGcmVxIiwibW9kRnJlcSIsIm1vZERlcHRoIiwiRm1TeW50aCIsImhhcm1vbmljaXR5IiwibW9kSW5kZXgiLCJFbnZlbG9wcGUiLCJjb25uZWN0IiwiZGVzdCIsImNvbnNvbGUiLCJsb2ciLCJwbGF5IiwidGltZSIsInN0YXJ0Iiwic3RvcCIsImFwcGx5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFZSxNQUFNQSxJQUFOLENBQVc7QUFDeEJDLEVBQUFBLFdBQVcsQ0FBQ0MsWUFBRCxFQUFlQyxXQUFmLEVBQTRCO0FBQ3JDLFNBQUtELFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsU0FBS0UsU0FBTCxHQUFpQkQsV0FBVyxDQUFDQyxTQUE3QjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JGLFdBQVcsQ0FBQ0UsUUFBNUI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCSCxXQUFXLENBQUNHLFFBQTVCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQkosV0FBVyxDQUFDSyxTQUFsQztBQUNBLFNBQUtDLEtBQUwsR0FBYU4sV0FBVyxDQUFDTSxLQUF6QjtBQUVBLFNBQUtDLE1BQUwsR0FBYyxLQUFLUixZQUFMLENBQWtCUyxVQUFsQixFQUFkO0FBQ0EsU0FBS0QsTUFBTCxDQUFZRSxJQUFaLENBQWlCQyxLQUFqQixHQUF5Qiw4QkFBZ0IsS0FBS1IsUUFBckIsQ0FBekI7QUFDQSxTQUFLUyxPQUFMLEdBQWUsS0FBS1osWUFBTCxDQUFrQlMsVUFBbEIsRUFBZjs7QUFFQSxZQUFRLEtBQUtGLEtBQUwsQ0FBV00sU0FBbkI7QUFDRSxXQUFLLE1BQUw7QUFDRSxhQUFLQyxLQUFMLEdBQWEsS0FBS2QsWUFBTCxDQUFrQmUsZ0JBQWxCLEVBQWI7QUFDQSxhQUFLRCxLQUFMLENBQVdaLFNBQVgsQ0FBcUJTLEtBQXJCLEdBQTZCLEtBQUtULFNBQWxDO0FBQ0E7O0FBQ0YsV0FBSyxJQUFMO0FBQ0UsYUFBS1ksS0FBTCxHQUFhLElBQUlFLGdCQUFKLENBQVksS0FBS2hCLFlBQWpCLENBQWI7QUFDQSxhQUFLYyxLQUFMLENBQVdHLFFBQVgsR0FBc0IsS0FBS2YsU0FBM0I7QUFDQSxhQUFLWSxLQUFMLENBQVdJLE9BQVgsR0FBcUIsS0FBS1gsS0FBTCxDQUFXVyxPQUFoQztBQUNBLGFBQUtKLEtBQUwsQ0FBV0ssUUFBWCxHQUFzQixLQUFLWixLQUFMLENBQVdZLFFBQWpDO0FBQ0E7O0FBQ0YsV0FBSyxJQUFMO0FBQ0UsYUFBS0wsS0FBTCxHQUFhLElBQUlNLGdCQUFKLENBQVksS0FBS3BCLFlBQWpCLENBQWI7QUFDQSxhQUFLYyxLQUFMLENBQVdHLFFBQVgsR0FBc0IsS0FBS2YsU0FBM0I7QUFDQSxhQUFLWSxLQUFMLENBQVdPLFdBQVgsR0FBeUIsS0FBS2QsS0FBTCxDQUFXYyxXQUFwQztBQUNBLGFBQUtQLEtBQUwsQ0FBV1EsUUFBWCxHQUFzQixLQUFLZixLQUFMLENBQVdlLFFBQWpDO0FBQ0E7O0FBQ0YsV0FBSyxVQUFMO0FBQ0U7QUFsQko7O0FBcUJBLFNBQUtoQixTQUFMLEdBQWlCLElBQUlpQixrQkFBSixDQUFjLEtBQUtYLE9BQUwsQ0FBYUYsSUFBM0IsRUFBaUMsS0FBS04sUUFBdEMsRUFBZ0QsS0FBS0MsY0FBckQsQ0FBakI7QUFFQSxTQUFLUyxLQUFMLENBQVdVLE9BQVgsQ0FBbUIsS0FBS1osT0FBeEI7QUFDQSxTQUFLQSxPQUFMLENBQWFZLE9BQWIsQ0FBcUIsS0FBS2hCLE1BQTFCO0FBQ0Q7O0FBRURnQixFQUFBQSxPQUFPLENBQUNDLElBQUQsRUFBTztBQUNaQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLFNBQUtqQixNQUFMLENBQVlnQixPQUFaLENBQW9CQyxJQUFwQjtBQUNEOztBQUVERyxFQUFBQSxJQUFJLENBQUNDLElBQUQsRUFBTztBQUNULFNBQUtDLEtBQUwsQ0FBV0QsSUFBWDtBQUNBLFNBQUtFLElBQUwsQ0FBVUYsSUFBSSxHQUFHLEtBQUt6QixRQUF0QjtBQUNEOztBQUVEMEIsRUFBQUEsS0FBSyxDQUFDRCxJQUFELEVBQU87QUFDVixTQUFLdkIsU0FBTCxDQUFlMEIsS0FBZixDQUFxQkgsSUFBckI7QUFDQSxTQUFLZixLQUFMLENBQVdnQixLQUFYLENBQWlCRCxJQUFqQjtBQUNEOztBQUVERSxFQUFBQSxJQUFJLENBQUNGLElBQUQsRUFBTztBQUNULFNBQUtmLEtBQUwsQ0FBV2lCLElBQVgsQ0FBZ0JGLElBQWhCO0FBQ0Q7O0FBekR1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbVN5bnRoIGZyb20gXCIuLi8uLi8uLi9jb2xvcl9maWVsZHNfdjIgY29waWUvc3JjL3V0aWxzL2FtU3ludGguanNcIjtcbmltcG9ydCBGbVN5bnRoIGZyb20gXCIuLi8uLi8uLi9jb2xvcl9maWVsZHNfdjIgY29waWUvc3JjL3V0aWxzL2ZtU3ludGguanNcIjtcbmltcG9ydCBFbnZlbG9wcGUgZnJvbSBcIi4vZW52ZWxvcHBlLmpzXCI7XG5pbXBvcnQgZGVjaWJlbFRvTGluZWFyIGZyb20gXCIuLi9tYXRoL2RlY2liZWxUb0xpbmVhci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RlIHtcbiAgY29uc3RydWN0b3IoYXVkaW9Db250ZXh0LCBub3RlRGljdE9zYykge1xuICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0O1xuICAgIHRoaXMuZnJlcXVlbmN5ID0gbm90ZURpY3RPc2MuZnJlcXVlbmN5O1xuICAgIHRoaXMudmVsb2NpdHkgPSBub3RlRGljdE9zYy52ZWxvY2l0eTtcbiAgICB0aGlzLmR1cmF0aW9uID0gbm90ZURpY3RPc2MuZHVyYXRpb247XG4gICAgdGhpcy5lbnZCcmVha3BvaW50cyA9IG5vdGVEaWN0T3NjLmVudmVsb3BwZTtcbiAgICB0aGlzLm1ldGFzID0gbm90ZURpY3RPc2MubWV0YXM7XG5cbiAgICB0aGlzLm91dHB1dCA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcbiAgICB0aGlzLm91dHB1dC5nYWluLnZhbHVlID0gZGVjaWJlbFRvTGluZWFyKHRoaXMudmVsb2NpdHkpO1xuICAgIHRoaXMubW9kR2FpbiA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcblxuICAgIHN3aXRjaCAodGhpcy5tZXRhcy5zeW50aFR5cGUpIHtcbiAgICAgIGNhc2UgJ3NpbmUnOlxuICAgICAgICB0aGlzLnN5bnRoID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpO1xuICAgICAgICB0aGlzLnN5bnRoLmZyZXF1ZW5jeS52YWx1ZSA9IHRoaXMuZnJlcXVlbmN5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2FtJzpcbiAgICAgICAgdGhpcy5zeW50aCA9IG5ldyBBbVN5bnRoKHRoaXMuYXVkaW9Db250ZXh0KTtcbiAgICAgICAgdGhpcy5zeW50aC5jYXJyRnJlcSA9IHRoaXMuZnJlcXVlbmN5O1xuICAgICAgICB0aGlzLnN5bnRoLm1vZEZyZXEgPSB0aGlzLm1ldGFzLm1vZEZyZXE7XG4gICAgICAgIHRoaXMuc3ludGgubW9kRGVwdGggPSB0aGlzLm1ldGFzLm1vZERlcHRoO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ZtJzpcbiAgICAgICAgdGhpcy5zeW50aCA9IG5ldyBGbVN5bnRoKHRoaXMuYXVkaW9Db250ZXh0KTtcbiAgICAgICAgdGhpcy5zeW50aC5jYXJyRnJlcSA9IHRoaXMuZnJlcXVlbmN5O1xuICAgICAgICB0aGlzLnN5bnRoLmhhcm1vbmljaXR5ID0gdGhpcy5tZXRhcy5oYXJtb25pY2l0eTtcbiAgICAgICAgdGhpcy5zeW50aC5tb2RJbmRleCA9IHRoaXMubWV0YXMubW9kSW5kZXg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZ3JhbnVsYXInOlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLmVudmVsb3BwZSA9IG5ldyBFbnZlbG9wcGUodGhpcy5tb2RHYWluLmdhaW4sIHRoaXMuZHVyYXRpb24sIHRoaXMuZW52QnJlYWtwb2ludHMpO1xuXG4gICAgdGhpcy5zeW50aC5jb25uZWN0KHRoaXMubW9kR2Fpbik7XG4gICAgdGhpcy5tb2RHYWluLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuICB9XG5cbiAgY29ubmVjdChkZXN0KSB7XG4gICAgY29uc29sZS5sb2coZGVzdCk7XG4gICAgdGhpcy5vdXRwdXQuY29ubmVjdChkZXN0KTtcbiAgfVxuXG4gIHBsYXkodGltZSkge1xuICAgIHRoaXMuc3RhcnQodGltZSk7XG4gICAgdGhpcy5zdG9wKHRpbWUgKyB0aGlzLmR1cmF0aW9uKTtcbiAgfVxuXG4gIHN0YXJ0KHRpbWUpIHtcbiAgICB0aGlzLmVudmVsb3BwZS5hcHBseSh0aW1lKTtcbiAgICB0aGlzLnN5bnRoLnN0YXJ0KHRpbWUpO1xuICB9O1xuXG4gIHN0b3AodGltZSkge1xuICAgIHRoaXMuc3ludGguc3RvcCh0aW1lKTtcbiAgfTtcbn0iXX0=