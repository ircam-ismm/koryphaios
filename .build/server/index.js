"use strict";

require("source-map-support/register");

var _server = require("@soundworks/core/server");

var _path = _interopRequireDefault(require("path"));

var _serveStatic = _interopRequireDefault(require("serve-static"));

var _templateLiteral = _interopRequireDefault(require("template-literal"));

var _stateManagerOsc = require("@soundworks/state-manager-osc");

var _score = _interopRequireDefault(require("./schemas/score.js"));

var _player = _interopRequireDefault(require("./schemas/player.js"));

var _masterControls = _interopRequireDefault(require("./schemas/masterControls.js"));

var _server2 = _interopRequireDefault(require("@soundworks/plugin-platform/server"));

var _server3 = _interopRequireDefault(require("@soundworks/plugin-sync/server"));

var _server4 = _interopRequireDefault(require("@soundworks/plugin-checkin/server"));

var _PlayerExperience = _interopRequireDefault(require("./PlayerExperience.js"));

var _ControllerExperience = _interopRequireDefault(require("./ControllerExperience.js"));

var _getConfig = _interopRequireDefault(require("../utils/getConfig.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ENV = process.env.ENV || 'default';
const config = (0, _getConfig.default)(ENV);
const server = new _server.Server(); // html template and static files (in most case, this should not be modified)

server.templateEngine = {
  compile: _templateLiteral.default
};
server.templateDirectory = _path.default.join('.build', 'server', 'tmpl');
server.router.use((0, _serveStatic.default)('public'));
server.router.use('build', (0, _serveStatic.default)(_path.default.join('.build', 'public')));
server.router.use('vendors', (0, _serveStatic.default)(_path.default.join('.vendors', 'public')));
console.log(`
--------------------------------------------------------
- launching "${config.app.name}" in "${ENV}" environment
- [pid: ${process.pid}]
--------------------------------------------------------
`); // -------------------------------------------------------------------
// register plugins
// -------------------------------------------------------------------
// server.pluginManager.register(pluginName, pluginFactory, [pluginOptions], [dependencies])

server.pluginManager.register('platform', _server2.default, {}, []);
server.pluginManager.register('sync', _server3.default, {}, []);
server.pluginManager.register('checkin', _server4.default, {}, []); // -------------------------------------------------------------------
// register schemas
// -------------------------------------------------------------------
// server.stateManager.registerSchema(name, schema);

server.stateManager.registerSchema('score', _score.default);
server.stateManager.registerSchema('player', _player.default);
server.stateManager.registerSchema('masterControls', _masterControls.default);

(async function launch() {
  try {
    await server.init(config, (clientType, config, httpRequest) => {
      return {
        clientType: clientType,
        app: {
          name: config.app.name,
          author: config.app.author
        },
        env: {
          type: config.env.type,
          websockets: config.env.websockets,
          subpath: config.env.subpath
        }
      };
    });
    const sync = server.pluginManager.get('sync');
    const ngroups = 6;
    const score = await server.stateManager.create('score');
    const globalMasterControls = await server.stateManager.create('masterControls', {
      group: 0
    });
    const groupMasterControls = new Set();

    for (let i = 1; i <= ngroups; i++) {
      const groupControls = await server.stateManager.create('masterControls', {
        group: i
      });
      groupMasterControls.add(groupControls);
    }

    const playerExperience = new _PlayerExperience.default(server, 'player');
    const controllerExperience = new _ControllerExperience.default(server, 'controller'); // start all the things

    await server.start();
    playerExperience.start();
    controllerExperience.start();
    const oscConfig = {
      // these are the defaults
      localAddress: '0.0.0.0',
      localPort: 57121,
      remoteAddress: '127.0.0.1',
      remotePort: 57122
    };
    const oscStateManager = new _stateManagerOsc.StateManagerOsc(server.stateManager, oscConfig);
    await oscStateManager.init();
    const players = new Set();
    let noteCounter = 0;
    const modCounter = 3;
    server.stateManager.observe(async (schemaName, stateId, nodeId) => {
      switch (schemaName) {
        case 'player':
          const playerState = await server.stateManager.attach(schemaName, stateId);
          playerState.onDetach(() => {
            // clean things
            players.delete(playerState);
          });
          players.add(playerState);
          break;
      }
    }); //Receiving notes from Max by OSC

    score.subscribe(async updates => {
      if (updates.hasOwnProperty('note')) {
        const noteDict = updates.note;

        if (Array.isArray(noteDict)) {
          for (let i = 0; i < noteDict.length; i++) {
            //Parsing Max list into smth readable by js
            const splitStr = noteDict[i].enveloppe.split(' ');
            const env = [];
            let i = 1;

            while (i < splitStr.length - 1) {
              const bp = [];
              bp.push(parseFloat(splitStr[i + 1]));
              bp.push(parseFloat(splitStr[i + 2]));
              bp.push(parseFloat(splitStr[i + 3]));
              env.push(bp);
              i += 5;
            }

            noteDict[i].enveloppe = env;
          }
        } else {
          //Parsing Max list into smth readable by js
          const splitStr = noteDict.enveloppe.split(' ');
          const env = [];
          let i = 1;

          while (i < splitStr.length - 1) {
            const bp = [];
            bp.push(parseFloat(splitStr[i + 1]));
            bp.push(parseFloat(splitStr[i + 2]));
            bp.push(parseFloat(splitStr[i + 3]));
            env.push(bp);
            i += 5;
          }

          noteDict.enveloppe = env;
        } //Dispatch note among players


        players.forEach(playerState => {
          const id = playerState.get('id');

          if (id % modCounter === noteCounter) {
            playerState.set({
              note: noteDict,
              playTime: sync.getSyncTime() + 0.2
            });
          }
        });
        noteCounter = (noteCounter + 1) % modCounter;
      }
    });
  } catch (err) {
    console.error(err.stack);
  }
})();

process.on('unhandledRejection', (reason, p) => {
  console.log('> Unhandled Promise Rejection');
  console.log(reason);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,