"use strict";

require("source-map-support/register");

var _server = require("@soundworks/core/server");

var _path = _interopRequireDefault(require("path"));

var _serveStatic = _interopRequireDefault(require("serve-static"));

var _templateLiteral = _interopRequireDefault(require("template-literal"));

var _stateManagerOsc = require("@soundworks/state-manager-osc");

var _score = _interopRequireDefault(require("./schemas/score.js"));

var _player = _interopRequireDefault(require("./schemas/player.js"));

var _busControls = _interopRequireDefault(require("./schemas/busControls.js"));

var _server2 = _interopRequireDefault(require("@soundworks/plugin-platform/server"));

var _server3 = _interopRequireDefault(require("@soundworks/plugin-sync/server"));

var _server4 = _interopRequireDefault(require("@soundworks/plugin-checkin/server"));

var _PlayerExperience = _interopRequireDefault(require("./PlayerExperience.js"));

var _ControllerExperience = _interopRequireDefault(require("./ControllerExperience.js"));

var _getConfig = _interopRequireDefault(require("../utils/getConfig.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ENV = process.env.ENV || 'default';
const config = (0, _getConfig.default)(ENV);
const server = new _server.Server(); // html template and static files (in most case, this should not be modified)

server.templateEngine = {
  compile: _templateLiteral.default
};
server.templateDirectory = _path.default.join('.build', 'server', 'tmpl');
server.router.use((0, _serveStatic.default)('public'));
server.router.use('build', (0, _serveStatic.default)(_path.default.join('.build', 'public')));
server.router.use('vendors', (0, _serveStatic.default)(_path.default.join('.vendors', 'public')));
console.log(`
--------------------------------------------------------
- launching "${config.app.name}" in "${ENV}" environment
- [pid: ${process.pid}]
--------------------------------------------------------
`); // -------------------------------------------------------------------
// register plugins
// -------------------------------------------------------------------
// server.pluginManager.register(pluginName, pluginFactory, [pluginOptions], [dependencies])

server.pluginManager.register('platform', _server2.default, {}, []);
server.pluginManager.register('sync', _server3.default, {}, []);
server.pluginManager.register('checkin', _server4.default, {}, []); // -------------------------------------------------------------------
// register schemas
// -------------------------------------------------------------------
// server.stateManager.registerSchema(name, schema);

server.stateManager.registerSchema('score', _score.default);
server.stateManager.registerSchema('player', _player.default);
server.stateManager.registerSchema('globalBusControls', _busControls.default);
server.stateManager.registerSchema('sineBusControls', _busControls.default);
server.stateManager.registerSchema('amBusControls', _busControls.default);
server.stateManager.registerSchema('fmBusControls', _busControls.default);

(async function launch() {
  try {
    await server.init(config, (clientType, config, httpRequest) => {
      return {
        clientType: clientType,
        app: {
          name: config.app.name,
          author: config.app.author
        },
        env: {
          type: config.env.type,
          websockets: config.env.websockets,
          subpath: config.env.subpath
        }
      };
    });
    const sync = server.pluginManager.get('sync');
    const score = await server.stateManager.create('score');
    const globalMasterControls = await server.stateManager.create('globalBusControls');
    const sineMasterControls = await server.stateManager.create('sineBusControls');
    const amMasterControls = await server.stateManager.create('amBusControls');
    const fmMasterControls = await server.stateManager.create('fmBusControls');
    const playerExperience = new _PlayerExperience.default(server, 'player');
    const controllerExperience = new _ControllerExperience.default(server, 'controller'); // start all the things

    await server.start();
    playerExperience.start();
    controllerExperience.start();
    const oscConfig = {
      // these are the defaults
      localAddress: '0.0.0.0',
      localPort: 57121,
      remoteAddress: '127.0.0.1',
      remotePort: 57122
    };
    const oscStateManager = new _stateManagerOsc.StateManagerOsc(server.stateManager, oscConfig);
    await oscStateManager.init(); //Observe players connections

    const players = new Set();
    const playersIds = new Array();
    server.stateManager.observe(async (schemaName, stateId, nodeId) => {
      switch (schemaName) {
        case 'player':
          const playerState = await server.stateManager.attach(schemaName, stateId);
          const plId = server.stateManager.get('id');
          playerState.onDetach(() => {
            // clean things
            players.delete(playerState);
            playersIds.splice(playersIds.indexOf(plId), 1);
          });
          players.add(playerState);
          playersIds.add(plId);
          break;
      }
    }); //Receiving notes from Max by OSC

    score.subscribe(async updates => {
      if (updates.hasOwnProperty('notes')) {
        // console.log("note received", updates.notes.length);
        const dispatchStrategy = score.get('dispatchStrategy');

        switch (dispatchStrategy) {
          case 'sendAll':
            players.forEach(playerState => {
              playerState.set({
                note: updates.notes,
                playTime: sync.getSyncTime() + 0.1
              });
            });
            break;

          case 'randomSpread':
            const nNotes = updates.notes.length;
            const nPlayers = playersIds.length;
            const assignment = randomGrouping(nNotes, nPlayers);
            players.forEach(playerState => {
              const plId = playerState.get('id');
              const idIdx = playersIds.indexOf(plId);
              const plAssignment = assignment[idIdx];
              const notesToSend = [];

              for (let n of plAssignment) {
                notesToSend.push(updates.notes[n]);
              }

              playerState.set({
                note: notesToSend,
                playTime: sync.getSyncTime() + 0.1
              });
            });
            break;
        }
      }
    });
  } catch (err) {
    console.error(err.stack);
  }
})();

function randomGrouping(nGroups, nPlayers) {
  const assignment = Array.from(new Array(nPlayers), () => []);

  if (nGroups <= nPlayers) {
    const players = Array.from(Array(nPlayers).keys());
    let gp = 0;

    while (players.length > nPlayers % nGroups) {
      const randomIdx = Math.floor(Math.random() * players.length);
      const player = players[randomIdx];
      assignment[player].push(gp);
      players.splice(randomIdx, 1);
      gp = (gp + 1) % nGroups;
    }

    const groups = Array.from(Array(nGroups).keys());

    while (players.length > 0) {
      const randomIdxPl = Math.floor(Math.random() * players.length);
      const randomIdxGp = Math.floor(Math.random() * groups.length);
      const player = players[randomIdxPl];
      const group = groups[randomIdxGp];
      assignment[player].push(group);
      players.splice(randomIdxPl, 1);
      groups.splice(randomIdxGp, 1);
    }
  } else {
    const groups = Array.from(Array(nGroups).keys());
    let pl = 0;

    while (groups.length > nGroups % nPlayers) {
      const randomIdx = Math.floor(Math.random() * groups.length);
      const group = groups[randomIdx];
      assignment[pl].push(group);
      groups.splice(randomIdx, 1);
      pl = (pl + 1) % nPlayers;
      console.log(assignment);
    }

    console.log('second part');
    const players = Array.from(Array(nPlayers).keys());

    while (groups.length > 0) {
      const randomIdxPl = Math.floor(Math.random() * players.length);
      const randomIdxGp = Math.floor(Math.random() * groups.length);
      const player = players[randomIdxPl];
      const group = groups[randomIdxGp];
      assignment[player].push(group);
      players.splice(randomIdxPl, 1);
      groups.splice(randomIdxGp, 1);
      console.log(assignment);
    }
  }

  return assignment;
}

process.on('unhandledRejection', (reason, p) => {
  console.log('> Unhandled Promise Rejection');
  console.log(reason);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,